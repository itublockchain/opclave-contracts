// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Script.sol";
import "forge-std/console.sol";
import "../src/entrypoint/EntryPoint.sol";
import "../src/BioAccount.sol";
import "../src/OraclePaymaster.sol";
import "../src/mocks/MockOracle.sol";
import "../src/mocks/MockERC20.sol";
import "../src/Factory.sol";

contract BioAccountScript is Script {
    EntryPoint entryPoint = EntryPoint(payable(0x7C2641de9b8ECED9C3796B0bf99Ead1BeD5407A5));
    BioAccount account;
    OraclePaymaster paymaster = OraclePaymaster(payable(0x0bb7B5e7E3B7Da3D45fEa583E467D1c4944D7A1f));
    MockOracle oracle;
    MockERC20 optimismToken = MockERC20(0xBB3E66eE258ef9Cc7b4e5d84F765071658A5215D);
    Factory factory;

    address precompile = address(0x1773);
    bytes publicKey = hex"03acdd696a4c5b603f7115db9baa5fc58b14fb2fa133b9c1f472465e4718bfb98d";

    address sender = 0xC6df98932A31273a57826490A3008Ce248Eb4523;
    bytes initCode =
        hex"4f072D80f98123aA278575e0e02b0e9C56cC721Dfd7230d600000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000116b60a06040523480156200001157600080fd5b50604051620010cb380380620010cb83398101604081905262000034916200006e565b6001600160a01b03821660805260016200004f8282620001f3565b505050620002bf565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200008257600080fd5b82516001600160a01b03811681146200009a57600080fd5b602084810151919350906001600160401b0380821115620000ba57600080fd5b818601915086601f830112620000cf57600080fd5b815181811115620000e457620000e462000058565b604051601f8201601f19908116603f011681019083821181831017156200010f576200010f62000058565b8160405282815289868487010111156200012857600080fd5b600093505b828410156200014c57848401860151818501870152928501926200012d565b60008684830101528096505050505050509250929050565b600181811c908216806200017957607f821691505b6020821081036200019a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001ee57600081815260208120601f850160051c81016020861015620001c95750805b601f850160051c820191505b81811015620001ea57828155600101620001d5565b5050505b505050565b81516001600160401b038111156200020f576200020f62000058565b620002278162000220845462000164565b84620001a0565b602080601f8311600181146200025f5760008415620002465750858301515b600019600386901b1c1916600185901b178555620001ea565b600085815260208120601f198616915b8281101562000290578886015182559484019460019091019084016200026f565b5085821015620002af5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051610de9620002e26000396000818161021a01526105ee0152610de96000f3fe6080604052600436106100c65760003560e01c80638c2ebc7c1161007f578063b0d691fe11610059578063b0d691fe1461020b578063b61d27f61461023e578063ea8932d81461025e578063ff5cd0e61461027457600080fd5b80638c2ebc7c146101b6578063a91d58b4146101d6578063affed0e0146101f657600080fd5b806312b22256146100d257806318dfb3c7146100f45780632b445d781461011457806336a52a18146101295780633a871cdd1461016657806363ffab311461019457600080fd5b366100cd57005b600080fd5b3480156100de57600080fd5b506100f26100ed36600461092a565b61028a565b005b34801561010057600080fd5b506100f261010f366004610991565b6102b8565b34801561012057600080fd5b506100f26103bc565b34801561013557600080fd5b50600454610149906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561017257600080fd5b506101866101813660046109fd565b61048e565b60405190815260200161015d565b3480156101a057600080fd5b506101a96104d3565b60405161015d9190610a75565b3480156101c257600080fd5b506100f26101d1366004610aa8565b610561565b3480156101e257600080fd5b506100f26101f1366004610b03565b610572565b34801561020257600080fd5b50600054610186565b34801561021757600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610149565b34801561024a57600080fd5b506100f2610259366004610b45565b610590565b34801561026a57600080fd5b5061018660035481565b34801561028057600080fd5b5061018660025481565b6102926105e3565b600480546001600160a01b0319166001600160a01b039290921691909117905542600355565b6102c06105e3565b82811461030a5760405162461bcd60e51b815260206004820152601360248201527277726f6e67206172726179206c656e6774687360681b60448201526064015b60405180910390fd5b60005b838110156103b15761039f85858381811061032a5761032a610b93565b905060200201602081019061033f919061092a565b600085858581811061035357610353610b93565b90506020028101906103659190610ba9565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061065d92505050565b806103a981610c06565b91505061030d565b505042600355505050565b6004546001600160a01b031633146104065760405162461bcd60e51b815260206004820152600d60248201526c3737ba1034b73432b934ba37b960991b6044820152606401610301565b6002546003546104169042610c1f565b116104525760405162461bcd60e51b815260206004820152600c60248201526b6e6f7420696e61637469766560a01b6044820152606401610301565b6004546040516001600160a01b03909116904780156108fc02916000818181858888f1935050505015801561048b573d6000803e3d6000fd5b50565b60006104986105e3565b6104a284846106d4565b90506104b16040850185610ba9565b90506000036104c3576104c38461082b565b6104cc82610889565b9392505050565b600180546104e090610c38565b80601f016020809104026020016040519081016040528092919081815260200182805461050c90610c38565b80156105595780601f1061052e57610100808354040283529160200191610559565b820191906000526020600020905b81548152906001019060200180831161053c57829003601f168201915b505050505081565b6105696105e3565b60025542600355565b61057a6105e3565b6001610587828483610cd7565b50504260035550565b6105986105e3565b6105d9848484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061065d92505050565b5050426003555050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461065b5760405162461bcd60e51b815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20456e747279506f696e74000000006044820152606401610301565b565b600080846001600160a01b031684846040516106799190610d97565b60006040518083038185875af1925050503d80600081146106b6576040519150601f19603f3d011682016040523d82523d6000602084013e6106bb565b606091505b5091509150816106cd57805160208201fd5b5050505050565b60008061177390506000600180546106eb90610c38565b80601f016020809104026020016040519081016040528092919081815260200182805461071790610c38565b80156107645780601f1061073957610100808354040283529160200191610764565b820191906000526020600020905b81548152906001019060200180831161074757829003601f168201915b5050505050905060008580610140019061077e9190610ba9565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516020880151608082019081526021890151969750919591945090925060a001905053866021820152602083015160418201526038830151605982015260508301516071820152602081608983885afa61080957600080fd5b3d806000833e5051905061082081156000806108d6565b979650505050505050565b600080546020830135918061083f83610c06565b919050551461048b5760405162461bcd60e51b81526020600482015260166024820152756163636f756e743a20696e76616c6964206e6f6e636560501b6044820152606401610301565b801561048b57604051600090339060001990849084818181858888f193505050503d80600081146106cd576040519150601f19603f3d011682016040523d82523d6000602084013e6106cd565b600060d08265ffffffffffff16901b60a08465ffffffffffff16901b856108fe576000610901565b60015b60ff161717949350505050565b80356001600160a01b038116811461092557600080fd5b919050565b60006020828403121561093c57600080fd5b6104cc8261090e565b60008083601f84011261095757600080fd5b50813567ffffffffffffffff81111561096f57600080fd5b6020830191508360208260051b850101111561098a57600080fd5b9250929050565b600080600080604085870312156109a757600080fd5b843567ffffffffffffffff808211156109bf57600080fd5b6109cb88838901610945565b909650945060208701359150808211156109e457600080fd5b506109f187828801610945565b95989497509550505050565b600080600060608486031215610a1257600080fd5b833567ffffffffffffffff811115610a2957600080fd5b84016101608187031215610a3c57600080fd5b95602085013595506040909401359392505050565b60005b83811015610a6c578181015183820152602001610a54565b50506000910152565b6020815260008251806020840152610a94816040850160208701610a51565b601f01601f19169190910160400192915050565b600060208284031215610aba57600080fd5b5035919050565b60008083601f840112610ad357600080fd5b50813567ffffffffffffffff811115610aeb57600080fd5b60208301915083602082850101111561098a57600080fd5b60008060208385031215610b1657600080fd5b823567ffffffffffffffff811115610b2d57600080fd5b610b3985828601610ac1565b90969095509350505050565b60008060008060608587031215610b5b57600080fd5b610b648561090e565b935060208501359250604085013567ffffffffffffffff811115610b8757600080fd5b6109f187828801610ac1565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112610bc057600080fd5b83018035915067ffffffffffffffff821115610bdb57600080fd5b60200191503681900382131561098a57600080fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610c1857610c18610bf0565b5060010190565b81810381811115610c3257610c32610bf0565b92915050565b600181811c90821680610c4c57607f821691505b602082108103610c6c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b601f821115610cd257600081815260208120601f850160051c81016020861015610caf5750805b601f850160051c820191505b81811015610cce57828155600101610cbb565b5050505b505050565b67ffffffffffffffff831115610cef57610cef610c72565b610d0383610cfd8354610c38565b83610c88565b6000601f841160018114610d375760008515610d1f5750838201355b600019600387901b1c1916600186901b1783556106cd565b600083815260209020601f19861690835b82811015610d685786850135825560209485019460019092019101610d48565b5086821015610d855760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60008251610da9818460208701610a51565b919091019291505056fea2646970667358221220f8d4e33ce7662c3a30177882e38a5fdffa4d15eb115706ccae20efd21f60080264736f6c634300081100330000000000000000000000007c2641de9b8eced9c3796b0bf99ead1bed5407a50000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002103acdd696a4c5b603f7115db9baa5fc58b14fb2fa133b9c1f472465e4718bfb98d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    bytes approveCalldata =
        hex"b61d27f6000000000000000000000000bb3e66ee258ef9cc7b4e5d84f765071658a5215d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000044095ea7b30000000000000000000000000bb7b5e7e3b7da3d45fea583e467d1c4944d7a1f00000000000000000000000000000000000000000052b7d2dcc80cd2e400000000000000000000000000000000000000000000000000000000000000";
    bytes sendTenTokensCalldata =
        hex"b61d27f6000000000000000000000000bb3e66ee258ef9cc7b4e5d84f765071658a5215d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000044a9059cbb00000000000000000000000011dc744f9b69b87a1eb19c3900e0ff85b68539900000000000000000000000000000000000000000000000008ac7230489e8000000000000000000000000000000000000000000000000000000000000";
    bytes mockSignature =
        hex"00304502200f62a197ceb328bfcacc42d4118e19823a1f281e3ff2eda1c87f2464437cc3b3022100bbcda922818ba7ee43369a71db1b9c53a5981bff39300aded68ba51b99ced6dc";

    UserOperation userOpCreateAndApprove = UserOperation({
        sender: sender,
        nonce: 0,
        initCode: initCode,
        callData: approveCalldata,
        callGasLimit: 100000,
        verificationGasLimit: 1000000,
        preVerificationGas: 10000,
        maxFeePerGas: 0,
        maxPriorityFeePerGas: 0,
        paymasterAndData: hex"",
        signature: mockSignature
    });

    UserOperation userOpSendTokens = UserOperation({
        sender: sender,
        nonce: 1,
        initCode: "",
        callData: sendTenTokensCalldata,
        callGasLimit: 100000,
        verificationGasLimit: 1000000,
        preVerificationGas: 10000,
        maxFeePerGas: 5,
        maxPriorityFeePerGas: 5,
        paymasterAndData: hex"0bb7B5e7E3B7Da3D45fEa583E467D1c4944D7A1f",
        signature: mockSignature
    });

    function deploy() public {
        uint256 deployerPrivateKey = vm.envUint("PRIVATE_KEY");
        vm.startBroadcast(deployerPrivateKey);

        factory = new Factory();
        //entryPoint = new EntryPoint();
        //account = new BioAccount(address(entryPoint), publicKey);
        //optimismToken = new MockERC20("Optimism Token", "OP");
        //oracle = new MockOracle();
        //paymaster = new OraclePaymaster(address(entryPoint), address(oracle), address(optimismToken));

        vm.stopBroadcast();
    }

    function run() public {
        uint256 deployerPrivateKey = vm.envUint("PRIVATE_KEY");
        vm.startBroadcast(deployerPrivateKey);

        optimismToken.mint(sender, 5000 ether);
        //paymaster.deposit{value: 1 ether}();
        //UserOperation[] memory userOps0 = new UserOperation[](1);
        //UserOperation[] memory userOps1 = new UserOperation[](1);
        //userOps0[0] = userOpCreateAndApprove;
        //userOps1[0] = userOpSendTokens;
        //entryPoint.handleOps(userOps0, payable(address(1)));
        //entryPoint.handleOps(userOps1, payable(address(1)));

        vm.stopBroadcast();
    }
}
